GIT Homework 1

Для выполнения задания у вас должен быть установлен для Windows - GitBash.
Создан аккаунт в GitHub

Все шаги сценария выполняйте в терминале GitBush, Terminal, в папке под гитом.


Как отправить ДЗ на проверку.
 1. Создайте текстовый файл как в первом ДЗ по Terminal. - cat > GIT_HW_1.txt
 2. Сценарий перенесите в этот файл. - Ctrl + C (из чата в Telegram) Shift + Ins (в gitbash).
	Ctrl+C для выхода из редактирования.
 3. На против каждого действия - напишите команду в GitBash - тут команды не будет

Файл со сценарием и ссылку на свой гит хаб отправляйте менторам на проверку.

JSON
 4. Создать внешний репозиторий c названием JSON. - под своим аккаунтом в GITHUB встаем на вкладку
	Repositories. Нажимаем на зеленую кнопку New. Открывается страничка Create a new repository. В поле Repository name
	пишем "JSON". Нажимаем на зеленую кнопку Create repository.

 5. Клонировать репозиторий JSON на локальный компьютер.
 
	git clone https://github.com/pavelorekhov1981/JSON.git
	
 6. Внутри локального JSON создать файл “new.json”.
 
	cd JSON
	touch new.json
	
 7. Добавить файл под гит.
 
	git add new.json
	
 8. Закоммитить файл.
 
	git commit -m "add new.json file"
	
 9. Отправить файл на внешний GitHub репозиторий.
 
	git push
	
 10. Отредактировать содержание файла “new.json” - написать информацию о себе
 (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате JSON.
 
    cat >> new.json
	{
	"Full_name": 
       {
        "First_name": "Павел",
        "Last_name": "Орехов",
        "Patronymic_name": "Александрович"},
	"Age": 40,	
	"Quantity_of_pets": 1,
	"Future_salary_wanted": "100000 руб."
	}
	Ctrl+C для выхода из редактирования
	
 11. Отправить изменения на внешний репозиторий.
 
 	git add .
	git commit -m "new.json first change"
	git push
	
 12. Создать файл preferences.json
 
	touch preferences.json
	
 13. В файл preferences.json добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате JSON.
 
 	vim preferences.json
	
	Нажимаем Insert для редактирования
	В редакторе пишем
	{
	"Favorite_movie": "Interstate_60",
	"Favorite_tv_series": "Game_of_Thrones",
	"Favorite_food": "Dumplings",
	"Favorite_season": "Summer",
	"Country_to_visit": "Belorussia"
	}
	Esc для выхода из редактирования
	:wq
	
 14. Создать файл sklls.json добавить информацию о скиллах которые будут изучены на курсе в формате JSON
 
 	cat > skills.json
	
	{
	"skills":["Basic_theory",
       "client_server_architecture",
        "API_testing_JSON_XML",
    	"Logs",
    	"Postman_Fidler",
       "VPN",
       "DevTools",
       "Mobile_Testing",
       "Charles",
       "Terminal_Linux",
       "Charles",
       "SQL",
       "GIT",
       "Jmeter",
       "Scrum",
       "Python"]}
	
	Ctrl+C для выхода из редактирования.

 15. Отправить сразу 2 файла на внешний репозиторий.
 
 git add . 
 git commit -m "add preferences.json and skills.json files"
 git push


 16. На веб интерфейсе создать файл bug_report.json.
 
 Нажимаем на кнопку Add file. Из выпавшего меню выбираем Create new file. В поле "name your file" вводим "bug_report.json"
 
 17. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 
 	Нажимаем зеленую кнопку "Commit new file" внизу страницы
 
  18. На веб интерфейсе модифицировать файл bug_report.json, добавить баг репорт в формате JSON.
  
  Становимся на файл bug_report.txt. Справа страницы нажимаем на карандашик (Edit this file).
	Добавляем баг-репорт:
 {   
 	"Summary": "Login: Error messages in the login form are displayed in English",
   	"Environment":  "All browsers / devices",
	"Severity": "Major",
	"Steps to reproduce": {"1": "Open front end https:/www.test-obelink.be:8443/",
				    "2": "Follow_Inloggen_link",
				    "3": "Fill required fields with invalid data",
				    "4": "Click_Inlogged_button",
				    "5": "Pay attention to error messages"},
	"Actual result": "Error messages in the login form are displayed in English",
	"Expected result": "Error messages in the login form are displayed in chosen language",
	"Attachment":	"http://prntscr.com/...."}

 19. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 
 	Нажимаем зеленую кнопку "Commit changes" внизу страницы
	
 20. Синхронизировать внешний и локальный репозиторий JSON
 
 	git pull

____________________________________________________________________________
XML
 21. Создать внешний репозиторий c названием XML. - под своим аккаунтом в GITHUB встаем на вкладку
	Repositories. Нажимаем на зеленую кнопку New. Открывается страничка Create a new repository. В поле Repository name
	пишем "XML". Нажимаем на зеленую кнопку Create repository.

 22. Клонировать репозиторий XML на локальный компьютер.
 
	git clone https://github.com/pavelorekhov1981/XML.git
 
 23. Внутри локального XML создать файл “new.xml”.
 
	cd XML
	touch new.xml
	
 24. Добавить файл под гит.
 
	git add new.xml
 
 25. Закоммитить файл.
 
	git commit -m "add new.xml file"
 
 26. Отправить файл на внешний GitHub репозиторий.
 
	git push
	
 27. Отредактировать содержание файла “new.xml” - написать информацию о себе
 (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате XML.
    
	cat >> new.xml
	
	<person>
		<Full_name> 
			<First_name>Павел</First_name>
			<Last_name>Орехов</Last_name>
			<Patronymic_name>Александрович</Patronymic_name>
		</Full_name>	
		<Age>40</Age>	
		<Quantity_of_pets>1</Quantity_of_pets>
		<Future_salary_wanted>100000 руб. </Future_salary_wanted>
	</person>	

	Ctrl+C для выхода из редактирования.

 28. Отправить изменения на внешний репозиторий.
 
	git commit -am "new.xml first change"
	git push
	
 29. Создать файл preferences.xml
 
	touch preferences.xml

 30. В файл preferences.xml добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате XML.
 
 	vim preferences.xml
	
	Нажимаем Insert для редактирования
	В редакторе пишем
	
<preferences>
		<Favorite_movie> Interstate_60 </Favorite_movie>
		<Favorite_tv_series> Game_of_Thrones </Favorite_tv_series>
		<Favorite_food> Dumplings </Favorite_food>
		<Favorite_season> Summer </Favorite_season>
		<Country_to_visit> France </Country_to_visit>
</preferences>

	Esc для выхода из редактирования
	:wq
	
 31. Создать файл sklls.xml добавить информацию о скиллах которые будут изучены на курсе в формате XML
	
	cat > skills.xml #на самом деле это будет html, кроме первой строчки
	
	<?xml version="1.0" encoding="utf-8"?>
	<ul type="circle">

		    <li>Basic_theory</li>

		    <li>client_server_architecture</li>

    		<li type="disc">API_testing_JSON_XML</li>

			<li>Logs</li>

			<li>Postman_Fidler</li>

			<li>VPN</li>

			<li>DevTools</li>

			<li type="square">Mobile_Testing</li>

			<li>Charles</li>
 
			<li>Terminal_Linux</li>
    
			<li>Charles</li>
 
			<li type="disc">SQL</li>

			<li>GIT</li>
  
			<li>Jmeter</li>
 
			<li>Scrum</li>
  
			<li>Python</li>

	</ul>
		
	Ctrl+C для выхода из редактирования.

 32. Сделать коммит в одну строку.
 
 	git add .
	git commit -m "add preferences.xml and skills.xml files"
	
 33. Отправить сразу 2 файла на внешний репозиторий.
 
	git push
 
 34. На веб интерфейсе создать файл bug_report.xml.
 
 
 Нажимаем на кнопку Add file. Из выпавшего меню выбираем Create new file. В поле "name your file" вводим "bug_report.xml"
 
 35. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 
 	Нажимаем зеленую кнопку "Commit new file" внизу страницы
	
	
 36. На веб интерфейсе модифицировать файл bug_report.xml, добавить баг репорт в формате XML.
	Становимся на файл bug_report.xml. Справа страницы нажимаем на карандашик (Edit this file).
	Добавляем баг-репорт.
	
	<?xml version="1.0" encoding="utf-8"?>
	<bug_report>
	    <ul type="circle">
		<li> Summary: Login: Error messages in the login form are displayed in English</li>
		<li> Environment: All browsers / devices</li>
		<li> Severity: Major</li>
		<li> Steps_to_reproduce:
			<ol>
				<li> Open front end https:/www.test-obelink.be:8443/</li>
				<li> Follow_Inloggen_link</li>
				<li> Fill required fields with invalid data</li>
				<li> Click Inlogged button</li>
				<li> Pay attention to error messages</li>
			</ol>
		</li>
		<li> Actual_result: Error messages in the login form are displayed in English</li>
		<li> Expected_result: Error messages in the login form are displayed in chosen language</li>
		<li> Attachment: http://prntscr.com/....</li>
	    </ul>
	</bug_report>
	
 37. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 
 	Нажимаем зеленую кнопку "Commit changes" внизу страницы
	
 38. Синхронизировать внешний и локальный репозиторий XML
 
 	git pull
_____________________________________________________________________________________
TXT

 1. Создать внешний репозиторий c названием TXT. - под своим аккаунтом в GITHUB встаем на вкладку
	Repositories. Нажимаем на зеленую кнопку New. Открывается страничка Create a new repository. В поле Repository name
	пишем "TXT". Нажимаем на зеленую кнопку Create repository.

 2. Клонировать репозиторий TXT на локальный компьютер. 
 
	git clone https://github.com/pavelorekhov1981/TXT.git
	
 3. Внутри локального TXT создать файл “new.txt”.
 
	cd TXT
	touch new.txt
	
 4. Добавить файл под гит.
 
	git add new.txt
	
 5. Закоммитить файл.
 
	git commit -m "add new.txt file"
	
 6. Отправить файл на внешний GitHub репозиторий.
 
	git push
	
 7. Отредактировать содержание файла “new.txt” - написать информацию о себе
   (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате TXT.
   
    cat >> new.txt
	ФИО - Орехов Павел Александрович
	Количество домашних животных - 1
	Будущая желаемая зарплата - 100000 руб.
	
	Ctrl+C для выхода из редактирования.
	
 8. Отправить изменения на внешний репозиторий.
 
	git add .
	git commit -m "new.txt first change"
	git push
	
 9. Создать файл preferences.txt
 
	touch preferences.txt
	
 10. В файл preferences.txt” добавить информацию о своих предпочтениях
 (Любимый фильм, любимый сериал, любимая еда, любимое время года, страна которую хотели бы посетить) в формате TXT.
 
	vim preferences.txt
	Нажимаем Insert для редактирования
	В редакторе пишем
		Любимый фильм - "Трасса номер 60"
		Любимый сериал - "Игра престолов"
		Любимая еда - "Пельмени"
		Любимое время года - лето
		Страна, которую хотел бы посетить - Белоруссия
		
	Esc для выхода из редактирования
	:wq
	
 11. Создать файл sklls.txt добавить информацию о скиллах которые будут изучены на курсе в формате TXT
 
	cat > skills.txt
	
	Базовая теория
    Клиент-серверная архитектура. Методы запросов на сервер. Ответы сервера. Структуры запросов и ответов.
	JSON, XML. Их структура.
	Тестирование API.
	Снятие и чтение логов.
	Postman, Fidler.
	VPN
	Dev Tools веб браузеров (Google Chrome, FireFox).
	Мобильное тестирование. Особенность iOS, Android, гайдлайны.
	Сборка iOS приложений на XCode
	Сборка Android приложений на Android Studio
	Перехват мобильного трафика (сниффинг) через Charles
	Настройка прокси на iOS и Android.
	Терминал Linux 
	Простой bash скриптринг , автоматизация рутинных задач на сервере.
	Доступ к удалённым серверам.
	Основы SQL (Create, Delete, Drop, Insert Into, Select, From, Where, Join
	Git
	Jmeter
	Методология разработки Scrum	
	Python. Создание собственного клиент-серверного приложения.
	
	Ctrl+C для выхода из редактирования.
	
 12. Сделать коммит в одну строку.
 
	git add .
	git commit -m "add preferences.txt and skills.txt files"
		
 13. Отправить сразу 2 файла на внешний репозиторий.
 
	git push
	
 14. На веб интерфейсе создать файл bug_report.txt.
 
	Нажимаем на кнопку Add file. Из выпавшего меню выбираем Create new file. В поле "name your file" вводим "bug_report.txt" 
	
 15. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 
 	Нажимаем зеленую кнопку "Commit new file" внизу страницы
	
 16. На веб интерфейсе модифицировать файл bug_report.txt, добавить баг репорт в формате TXT.
 
	Становимся на файл bug_report.txt. Справа страницы нажимаем на карандашик (Edit this file).
	Добавляем баг-репорт.
	
	Summary:         	Login: Error messages in the login form are displayed in English
	Environment:     	All browsers / devices
	Severity:   	 	Major
	Steps to reproduce:        1. Open front end https:/www.test-obelink.be:8443/
						2. Follow "Inloggen" link
						3. Fill required fields with invalid data
						4. Click "Inlogged" button
						5. Pay attention to error messages
	Actual result:  	Error messages in the login form are displayed in English
	Expected result:	Error messages in the login form are displayed in chosen language
	Attachment			http://prntscr.com/....
	
 17. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 
	Нажимаем зеленую кнопку "Commit changes" внизу страницы
	
 18. Синхронизировать внешний и локальный репозиторий TXT
 
	git pull

